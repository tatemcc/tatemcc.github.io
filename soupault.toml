
# To learn about configuring soupault, visit https://www.soupault.app/reference-manual

[settings]
# Soupault version that the config was written/generated for
# Trying to process this config with an older version will result in an error message
soupault_version = "5.1.0"

# Display progress?
verbose = true

# Display detailed debug output?
debug = true

# Where input files (pages and assets) are stored.
site_dir = "site"

# Where the output goes
build_dir = "build"

# Files inside the site/ directory can be treated as pages or static assets,
# depending on the extension.
#
# Files with extensions from this list are considered pages and processed.
# All other files are copied to build/ unchanged.
#
# Note that for formats other than HTML, you need to specify an external program
# for converting them to HTML (see below).
page_file_extensions = ["htm", "html"]

# Soupault has built-in support for CommonMark
# If you use Markdown and want to use the built-in parser,
# use this option to specify file extensions
# that you want to be interpreted as Markdown files.
markdown_extensions = ["md"]

# By default, soupault uses "clean URLs",
# that is, $site_dir/page.html is converted to $build_dir/page/index.html
# You can make it produce $build_dir/page.tml instead by changing this option to false
clean_urls = true

# If you set clean_urls=false,
# file names with ".html" and ".htm" extensions are left unchanged.
keep_extensions = ["html", "htm"]

# All other extensions (".md", ".rst"...) are replaced, by default with ".html"
default_extension = "html"

# Page files with these extensions are ignored.
ignore_extensions = ["draft"]

# Soupault can work as a website generator or an HTML processor.
#
# In the "website generator" mode, it considers files in site/ page bodies
# and inserts them into the empty page template stored in templates/main.html
#
# Setting this option to false switches it to the "HTML processor" mode
# when it considers every file in site/ a complete page and only runs it through widgets/plugins.
generator_mode = true

# Files that contain an <html> element are considered complete pages rather than page bodies,
# even in the "website generator" mode.
# This allows you to use a unique layout for some pages and still have them processed by widgets.
complete_page_selector = "html"

# Website generator mode requires a page template (an empty page to insert a page body into).
# If you use "generator_mode = false", this file is not required.
default_template_file = "templates/main.html"

# Page content is inserted into a certain element of the page template.
# This option is a CSS selector that is used for locating that element.
default_content_selector = "main"

# You can choose where exactly to insert the content in its parent element.
# The default is append_child, but there are more, including prepend_child and replace_content
default_content_action = "append_child"

# If a page already has a document type declaration, keep the declaration
keep_doctype = true

# If a page does not have a document type declaration, force it to HTML5
# With keep_doctype=false, soupault will replace existing declarations with it too
doctype = "<!DOCTYPE html>"

# Insert whitespace into HTML for better readability
# When set to false, the original whitespace (if any) will be preserved as is
pretty_print_html = true

# Plugins can be either automatically discovered or loaded explicitly.
# By default discovery is enabled and the place where soupault is looking is the plugins/ subdirectory
# in your project.
# E.g., a file at plugins/my-plugin.lua will be registered as a widget named "my-plugin".
plugin_discovery = true
plugin_dirs = ["plugins"]

# Soupault caches outputs of external programs
# (page preprocessors and preprocess_element widget commands)
# to speed up repeated builds.
# You can disable caching if you don't want it, or set a different cache directory path.
# caching = true
caching = false
cache_dir = ".soupault-cache"

# Soupault supports a variety of page source character encodings,
# the default encoding is UTF-8
page_character_encoding = "utf-8"


[index]
extract_after_widgets = ["footnotes"]
# dump_json = "index.json"
[index.fields.title]
selector = ["h1"]
[index.fields.publish_date]
selector = ["time#publish-date"] # REVIEW: deduplicate - in custom_options?
fallback_to_content = true
[index.fields.html_content]
selector = ["main"]

[index.views.posts-index]
section = "blog/"
sort_by = "publish_date"
sort_descending = true
date_formats = ["%F"]
index_selector = "#blog-entries > ul"

# Jingoo template for rendering extracted metadata
index_item_template = """<li><time>{{publish_date}}</time> - <a href="{{url}}">{{title}}</a></li>"""

# It is possible to store pages in any format if you have a program
# that converts it to HTML and writes it to standard output.
# For example, if you want to use cmark instead of the built-in Markdown,
# remove settings.markdown_extensions and add this:
#[preprocessors]
#  md = "cmark --unsafe --smart"
#  adoc = "asciidoctor -o -"

# Pages can be further processed with "widgets"

[custom_options]
website_url = "https://tatemccartney.com"

# Takes the content of the first <h1> and inserts it into the <title>
[widgets.page-title]
widget = "title"
selector = "h1"

# Insert a <title> in a page if it doesn't have one already.
# By default soupault assumes if it's missing, you don't want it.
force = false

[widgets.syntax-highlight]
widget = "preprocess_element"
selector = '*[class^="language-"]'
command = 'bun run bun_scripts/syntax-highlight.ts'

[widgets.time-datetime-attrib]
widget = "element_template"
selector = "time"
template = """<time datetime="{{content}}">{{content}}</time>"""

[widgets.insert-footnotes-container]
widget = "insert-if"

selector = "main"
check_selector = "fn"
html = """
<hr/>
<div id="footnotes"></div>
""" # REVIEW: something semantically appropritate?

[widgets.footnotes]
widget = "footnotes"

after = "insert-footnotes-container"

footnote_template = "<p></p>"
selector = "div#footnotes"
footnote_selector = ["fn"]
footnote_link_class = "footnote"
back_links = true
link_id_prepend = "footnote-"
back_link_id_append = "-ref"

[widgets.rss]
widget = "gen-rss"

page = "index.md"
use_section = "blog"
date_formats = ["%Y-%m-%d"]
time_zone = "MST"
publish_date_selector = "time#publish-date"

[hooks]
startup.file = "hooks/startup.lua"
post-build.file = "hooks/post-build.lua"
